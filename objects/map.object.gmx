<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>map_width = room_width;
map_height = room_height;

cell_width = 8;
cell_height = 8;

cells_x = floor(map_width / cell_width);
cells_y = floor(map_height / cell_height);

surf_obstacles = surface_create(cells_x, cells_y);
surf_pathing[0] = surface_create(cells_x, cells_y);
surf_pathing[1] = surface_create(cells_x, cells_y);

//

in_progress = 0;
start_x = 0;
start_y = 0;

//

global.bound_shader = -1;
texture_set_interpolation(0);
texture_set_repeat(0);

//

surface_set_target(surf_obstacles);
    draw_clear(0);
surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(in_progress) {
    cell_u = 1/cells_x;
    cell_v = 1/cells_y;

    surface_set_target(surf_pathing[1]);
        draw_clear_alpha(0,0);
        shader_bind(shd_dijkstra);
        shader_set_uniform_f(shader_bound_u("uCellSize"), cell_u, cell_v);
        shader_set_uniform_f(shader_bound_u("uBlankColor"), 1,1,1,1);
        texture_set_stage(shader_bound_s("uObstacles"), surface_get_texture(surf_obstacles));
        
        draw_surface(surf_pathing[0], 0,0);
        shader_unbind();
    surface_reset_target();
    
    surface_set_target(surf_pathing[0]);
        draw_clear_alpha(0,0);
        shader_bind(shd_dijkstra);
        shader_set_uniform_f(shader_bound_u("uCellSize"), cell_u, cell_v);
        shader_set_uniform_f(shader_bound_u("uBlankColor"), 1,1,1,1);
        texture_set_stage(shader_bound_s("uObstacles"), surface_get_texture(surf_obstacles));
        
        draw_surface(surf_pathing[1], 0,0);
        shader_unbind();
    surface_reset_target();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="51">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var cx, cy;
cx = mouse_x;
cy = mouse_y;

cx = floor(cx / cell_width);
cy = floor(cy / cell_height);

surface_set_target(surf_obstacles);
    draw_point_colour(cx, cy, c_black);
surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var cx, cy;
cx = mouse_x;
cy = mouse_y;

cx = floor(cx / cell_width);
cy = floor(cy / cell_height);

surface_set_target(surf_obstacles);
    draw_point_colour(cx, cy, c_white);
surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(in_progress) {
    draw_surface_ext(surf_pathing[0], 0,0, cell_width,cell_height, 0,c_white,1);
    draw_circle(start_x*cell_width, start_y*cell_height, 4, 1);
}

draw_set_blend_mode(bm_add);
    draw_surface_ext(surf_obstacles, 0,0, cell_width,cell_height, 0,c_white,1);
draw_set_blend_mode(bm_normal);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="87">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(nav) {
    instance_destroy();
}

with(instance_create(0,0, nav)) {
    x = floor(mouse_x / other.cell_width);
    y = floor(mouse_y / other.cell_height);
    
    surf = other.surf_pathing[0];
}

in_progress = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_save(surf_obstacles, get_save_filename("PNG|*.png", "walls.png"));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="81">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>start_x = floor(mouse_x / cell_width);
start_y = floor(mouse_y / cell_height);

in_progress = 1;

//

surface_set_target(surf_pathing[0]);
    draw_clear_alpha(c_white, 1);
    
    mark_color = 1; //TODO: check if this is in sync with shader's pack
    draw_point_colour(start_x, start_y, mark_color);
surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_free(surf_obstacles);
surface_free(surf_pathing[0]);
surface_free(surf_pathing[1]);

tmp = background_add(get_open_filename("PNG|*.png", "walls.png"), 0,0);
cells_x = background_get_width(tmp);
cells_y = background_get_height(tmp);

surf_obstacles = surface_create(cells_x, cells_y);
surf_pathing[0] = surface_create(cells_x, cells_y);
surf_pathing[1] = surface_create(cells_x, cells_y);

//

surface_set_target(surf_obstacles);
    draw_background(tmp, 0,0);
surface_reset_target();

background_delete(tmp);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
